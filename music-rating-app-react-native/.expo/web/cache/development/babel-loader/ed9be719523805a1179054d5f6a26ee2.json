{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport * as SecureStore from 'expo-secure-store';\nimport { Actions } from 'react-native-router-flux';\nvar API_URL = \"http://127.0.0.1:8000/\";\n\nvar AuthService = function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(username, password) {\n      var response;\n      return _regeneratorRuntime.async(function login$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.post(API_URL + \"token-auth/\", {\n                username: username,\n                password: password\n              }));\n\n            case 2:\n              response = _context.sent;\n\n              if (response.data.user) {\n                SecureStore.setItemAsync(\"user\", JSON.stringify(response.data));\n                SecureStore.getItemAsync(\"user\").then(function (value) {\n                  console.log(value);\n                });\n              }\n\n              return _context.abrupt(\"return\", response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      SecureStore.deleteItemAsync(\"user\");\n    }\n  }, {\n    key: \"register\",\n    value: function register(username, password) {\n      return _regeneratorRuntime.async(function register$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", axios.post(API_URL + \"users/\", {\n                username: username,\n                password: password\n              }).then(function () {\n                console.log(username, password);\n              }).catch(function (e) {\n                console.log(e);\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      var credentials, myJson, user;\n      return _regeneratorRuntime.async(function getCurrentUser$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync('user'));\n\n            case 3:\n              credentials = _context3.sent;\n              console.log('value of credentials: ', credentials);\n\n              if (!(credentials !== null)) {\n                _context3.next = 14;\n                break;\n              }\n\n              _context3.next = 8;\n              return _regeneratorRuntime.awrap(JSON.parse(credentials));\n\n            case 8:\n              myJson = _context3.sent;\n              user = myJson.user.username;\n              console.log(user);\n              return _context3.abrupt(\"return\", user);\n\n            case 14:\n              return _context3.abrupt(\"return\", null);\n\n            case 15:\n              _context3.next = 20;\n              break;\n\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 17]], Promise);\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport default new AuthService();","map":{"version":3,"sources":["/Users/kirylbeliauski/Documents/COMP SCI/software engineering/hw4/actual hw/music-rating-app-react-native/components/Authentication.js"],"names":["axios","SecureStore","Actions","API_URL","AuthService","username","password","post","response","data","user","setItemAsync","JSON","stringify","getItemAsync","then","value","console","log","deleteItemAsync","catch","e","credentials","parse","myJson"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,IAAMC,OAAO,GAAG,wBAAhB;;IAEMC,W;;;;;;;WACJ,eAAYC,QAAZ,EAAsBC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACyBN,KAAK,CACzBO,IADoB,CACfJ,OAAO,GAAG,aADK,EACU;AAC7BE,gBAAAA,QAAQ,EAARA,QAD6B;AAE7BC,gBAAAA,QAAQ,EAARA;AAF6B,eADV,CADzB;;AAAA;AACQE,cAAAA,QADR;;AAME,kBAAIA,QAAQ,CAACC,IAAT,CAAcC,IAAlB,EAAwB;AACtBT,gBAAAA,WAAW,CAACU,YAAZ,CAAyB,MAAzB,EAAiCC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACC,IAAxB,CAAjC;AACAR,gBAAAA,WAAW,CAACa,YAAZ,CAAyB,MAAzB,EAAiCC,IAAjC,CAAsC,UAAAC,KAAK,EAAI;AAC7CC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,iBAFD;AAGD;;AAXH,+CAYSR,QAAQ,CAACC,IAZlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAeA,kBAAS;AACPR,MAAAA,WAAW,CAACkB,eAAZ,CAA4B,MAA5B;AAED;;;WAED,kBAAed,QAAf,EAAyBC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gDACSN,KAAK,CAACO,IAAN,CAAWJ,OAAO,GAAG,QAArB,EAA+B;AACpCE,gBAAAA,QAAQ,EAARA,QADoC;AAEpCC,gBAAAA,QAAQ,EAARA;AAFoC,eAA/B,EAINS,IAJM,CAID,YAAM;AACVE,gBAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ,EAAsBC,QAAtB;AACD,eANM,EAONc,KAPM,CAOA,UAACC,CAAD,EAAO;AACZJ,gBAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACD,eATM,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE8BpB,WAAW,CAACa,YAAZ,CAAyB,MAAzB,CAF9B;;AAAA;AAEUQ,cAAAA,WAFV;AAGIL,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCI,WAAtC;;AAHJ,oBAKQA,WAAW,KAAK,IALxB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAM4BV,IAAI,CAACW,KAAL,CAAWD,WAAX,CAN5B;;AAAA;AAMYE,cAAAA,MANZ;AAOUd,cAAAA,IAPV,GAOiBc,MAAM,CAACd,IAAP,CAAYL,QAP7B;AAQMY,cAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AARN,gDASaA,IATb;;AAAA;AAAA,gDAWiB,IAXjB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaIO,cAAAA,OAAO,CAACC,GAAR;;AAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAkBF,eAAe,IAAId,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\nimport * as SecureStore from 'expo-secure-store';\nimport { Actions } from 'react-native-router-flux';\n\nconst API_URL = \"http://127.0.0.1:8000/\";\n\nclass AuthService {\n  async login(username, password) {\n    const response = await axios\n      .post(API_URL + \"token-auth/\", {\n        username,\n        password\n      });\n    if (response.data.user) {\n      SecureStore.setItemAsync(\"user\", JSON.stringify(response.data))\n      SecureStore.getItemAsync(\"user\").then(value => {\n        console.log(value)\n      })\n    }\n    return response.data;\n  }\n\n  logout() {\n    SecureStore.deleteItemAsync(\"user\");\n\n  }\n\n  async register(username, password) {\n    return axios.post(API_URL + \"users/\", {\n      username,\n      password\n    })\n    .then(() => {\n      console.log(username, password);\n    })\n    .catch((e) => {\n      console.log(e)\n    })\n    //this.login(username, password)\n  }\n\n  async getCurrentUser() {\n    try {\n      const credentials = await SecureStore.getItemAsync('user');\n      console.log('value of credentials: ', credentials);\n\n      if (credentials !== null) {\n        const myJson =  await JSON.parse(credentials)\n        var user = myJson.user.username\n        console.log(user)\n        return user\n      }\n      else {return null}\n    } catch (e) {\n      console.log(e);\n    }\n}\n}\n\nexport default new AuthService;\n"]},"metadata":{},"sourceType":"module"}