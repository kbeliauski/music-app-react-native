{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/Users/kirylbeliauski/Documents/COMP SCI/software engineering/hw4/actual hw/music-rating-app-react-native/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js\",\n    _this4 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Pressability from \"../../Pressability/Pressability\";\nimport { PressabilityDebugView } from \"../../Pressability/PressabilityDebug\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport TVTouchable from \"./TVTouchable\";\nimport Platform from \"../../Utilities/Platform\";\nimport View from \"../../Components/View/View\";\nimport * as React from 'react';\n\nvar TouchableHighlight = function (_React$Component) {\n  _inherits(TouchableHighlight, _React$Component);\n\n  var _super = _createSuper(TouchableHighlight);\n\n  function TouchableHighlight() {\n    var _this;\n\n    _classCallCheck(this, TouchableHighlight);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._isMounted = false;\n    _this.state = {\n      pressability: new Pressability(_this._createPressabilityConfig()),\n      extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null\n    };\n    return _this;\n  }\n\n  _createClass(TouchableHighlight, [{\n    key: \"_createPressabilityConfig\",\n    value: function _createPressabilityConfig() {\n      var _this2 = this;\n\n      return {\n        cancelable: !this.props.rejectResponderTermination,\n        disabled: this.props.disabled,\n        hitSlop: this.props.hitSlop,\n        delayLongPress: this.props.delayLongPress,\n        delayPressIn: this.props.delayPressIn,\n        delayPressOut: this.props.delayPressOut,\n        minPressDuration: 0,\n        pressRectOffset: this.props.pressRetentionOffset,\n        android_disableSound: this.props.touchSoundDisabled,\n        onBlur: function onBlur(event) {\n          if (Platform.isTV) {\n            _this2._hideUnderlay();\n          }\n\n          if (_this2.props.onBlur != null) {\n            _this2.props.onBlur(event);\n          }\n        },\n        onFocus: function onFocus(event) {\n          if (Platform.isTV) {\n            _this2._showUnderlay();\n          }\n\n          if (_this2.props.onFocus != null) {\n            _this2.props.onFocus(event);\n          }\n        },\n        onLongPress: function onLongPress(event) {\n          if (_this2.props.onLongPress != null) {\n            _this2.props.onLongPress(event);\n          }\n        },\n        onPress: function onPress(event) {\n          if (_this2._hideTimeout != null) {\n            clearTimeout(_this2._hideTimeout);\n          }\n\n          if (!Platform.isTV) {\n            var _this2$props$delayPre;\n\n            _this2._showUnderlay();\n\n            _this2._hideTimeout = setTimeout(function () {\n              _this2._hideUnderlay();\n            }, (_this2$props$delayPre = _this2.props.delayPressOut) != null ? _this2$props$delayPre : 0);\n          }\n\n          if (_this2.props.onPress != null) {\n            _this2.props.onPress(event);\n          }\n        },\n        onPressIn: function onPressIn(event) {\n          if (_this2._hideTimeout != null) {\n            clearTimeout(_this2._hideTimeout);\n            _this2._hideTimeout = null;\n          }\n\n          _this2._showUnderlay();\n\n          if (_this2.props.onPressIn != null) {\n            _this2.props.onPressIn(event);\n          }\n        },\n        onPressOut: function onPressOut(event) {\n          if (_this2._hideTimeout == null) {\n            _this2._hideUnderlay();\n          }\n\n          if (_this2.props.onPressOut != null) {\n            _this2.props.onPressOut(event);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_createExtraStyles\",\n    value: function _createExtraStyles() {\n      var _this$props$activeOpa;\n\n      return {\n        child: {\n          opacity: (_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.85\n        },\n        underlay: {\n          backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor\n        }\n      };\n    }\n  }, {\n    key: \"_showUnderlay\",\n    value: function _showUnderlay() {\n      if (!this._isMounted || !this._hasPressHandler()) {\n        return;\n      }\n\n      this.setState({\n        extraStyles: this._createExtraStyles()\n      });\n\n      if (this.props.onShowUnderlay != null) {\n        this.props.onShowUnderlay();\n      }\n    }\n  }, {\n    key: \"_hideUnderlay\",\n    value: function _hideUnderlay() {\n      if (this._hideTimeout != null) {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n      }\n\n      if (this.props.testOnly_pressed === true) {\n        return;\n      }\n\n      if (this._hasPressHandler()) {\n        this.setState({\n          extraStyles: null\n        });\n\n        if (this.props.onHideUnderlay != null) {\n          this.props.onHideUnderlay();\n        }\n      }\n    }\n  }, {\n    key: \"_hasPressHandler\",\n    value: function _hasPressHandler() {\n      return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state$extraStyl, _this$state$extraStyl2;\n\n      var child = React.Children.only(this.props.children);\n\n      var _this$state$pressabil = this.state.pressability.getEventHandlers(),\n          onBlur = _this$state$pressabil.onBlur,\n          onFocus = _this$state$pressabil.onFocus,\n          eventHandlersWithoutBlurAndFocus = _objectWithoutProperties(_this$state$pressabil, [\"onBlur\", \"onFocus\"]);\n\n      return React.createElement(View, _extends({\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: this.props.accessibilityState,\n        accessibilityValue: this.props.accessibilityValue,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        importantForAccessibility: this.props.importantForAccessibility,\n        accessibilityLiveRegion: this.props.accessibilityLiveRegion,\n        accessibilityViewIsModal: this.props.accessibilityViewIsModal,\n        accessibilityElementsHidden: this.props.accessibilityElementsHidden,\n        style: StyleSheet.compose(this.props.style, (_this$state$extraStyl = this.state.extraStyles) == null ? void 0 : _this$state$extraStyl.underlay),\n        onLayout: this.props.onLayout,\n        hitSlop: this.props.hitSlop,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        focusable: this.props.focusable !== false && this.props.onPress !== undefined,\n        nativeID: this.props.nativeID,\n        testID: this.props.testID,\n        ref: this.props.hostRef\n      }, eventHandlersWithoutBlurAndFocus, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 7\n        }\n      }), React.cloneElement(child, {\n        style: StyleSheet.compose(child.props.style, (_this$state$extraStyl2 = this.state.extraStyles) == null ? void 0 : _this$state$extraStyl2.child)\n      }), __DEV__ ? React.createElement(PressabilityDebugView, {\n        color: \"green\",\n        hitSlop: this.props.hitSlop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }\n      }) : null);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this._isMounted = true;\n\n      if (Platform.isTV) {\n        this._tvTouchable = new TVTouchable(this, {\n          getDisabled: function getDisabled() {\n            return _this3.props.disabled === true;\n          },\n          onBlur: function onBlur(event) {\n            if (_this3.props.onBlur != null) {\n              _this3.props.onBlur(event);\n            }\n          },\n          onFocus: function onFocus(event) {\n            if (_this3.props.onFocus != null) {\n              _this3.props.onFocus(event);\n            }\n          },\n          onPress: function onPress(event) {\n            if (_this3.props.onPress != null) {\n              _this3.props.onPress(event);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.state.pressability.configure(this._createPressabilityConfig());\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n\n      if (this._hideTimeout != null) {\n        clearTimeout(this._hideTimeout);\n      }\n\n      if (Platform.isTV) {\n        if (this._tvTouchable != null) {\n          this._tvTouchable.destroy();\n        }\n      }\n\n      this.state.pressability.reset();\n    }\n  }]);\n\n  return TouchableHighlight;\n}(React.Component);\n\nmodule.exports = React.forwardRef(function (props, hostRef) {\n  return React.createElement(TouchableHighlight, _extends({}, props, {\n    hostRef: hostRef,\n    __self: _this4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 3\n    }\n  }));\n});","map":{"version":3,"sources":["/Users/kirylbeliauski/Documents/COMP SCI/software engineering/hw4/actual hw/music-rating-app-react-native/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js"],"names":["Pressability","PressabilityDebugView","StyleSheet","TVTouchable","Platform","View","React","TouchableHighlight","_isMounted","state","pressability","_createPressabilityConfig","extraStyles","props","testOnly_pressed","_createExtraStyles","cancelable","rejectResponderTermination","disabled","hitSlop","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onBlur","event","isTV","_hideUnderlay","onFocus","_showUnderlay","onLongPress","onPress","_hideTimeout","clearTimeout","setTimeout","onPressIn","onPressOut","child","opacity","activeOpacity","underlay","backgroundColor","underlayColor","undefined","_hasPressHandler","setState","onShowUnderlay","onHideUnderlay","Children","only","children","getEventHandlers","eventHandlersWithoutBlurAndFocus","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","accessibilityValue","accessibilityActions","onAccessibilityAction","importantForAccessibility","accessibilityLiveRegion","accessibilityViewIsModal","accessibilityElementsHidden","compose","style","onLayout","hasTVPreferredFocus","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","focusable","nativeID","testID","hostRef","cloneElement","__DEV__","_tvTouchable","getDisabled","prevProps","prevState","configure","destroy","reset","Component","module","exports","forwardRef"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport StyleSheet, {type ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport TVTouchable from './TVTouchable';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\nimport Platform from '../../Utilities/Platform';\nimport View from '../../Components/View/View';\nimport * as React from 'react';\n\ntype AndroidProps = $ReadOnly<{|\n  nextFocusDown?: ?number,\n  nextFocusForward?: ?number,\n  nextFocusLeft?: ?number,\n  nextFocusRight?: ?number,\n  nextFocusUp?: ?number,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  hasTVPreferredFocus?: ?boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n  ...AndroidProps,\n  ...IOSProps,\n\n  activeOpacity?: ?number,\n  underlayColor?: ?ColorValue,\n  style?: ?ViewStyleProp,\n  onShowUnderlay?: ?() => void,\n  onHideUnderlay?: ?() => void,\n  testOnly_pressed?: ?boolean,\n\n  hostRef: React.Ref<typeof View>,\n|}>;\n\ntype ExtraStyles = $ReadOnly<{|\n  child: ViewStyleProp,\n  underlay: ViewStyleProp,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n  extraStyles: ?ExtraStyles,\n|}>;\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, which allows\n * the underlay color to show through, darkening or tinting the view.\n *\n * The underlay comes from wrapping the child in a new View, which can affect\n * layout, and sometimes cause unwanted visual artifacts if not used correctly,\n * for example if the backgroundColor of the wrapped view isn't explicitly set\n * to an opaque color.\n *\n * TouchableHighlight must have one child (not zero or more than one).\n * If you wish to have several child components, wrap them in a View.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableHighlight onPress={this._onPressButton}>\n *       <Image\n *         style={styles.button}\n *         source={require('./myButton.png')}\n *       />\n *     </TouchableHighlight>\n *   );\n * },\n * ```\n *\n *\n * ### Example\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react'\n * import {\n *   AppRegistry,\n *   StyleSheet,\n *   TouchableHighlight,\n *   Text,\n *   View,\n * } from 'react-native'\n *\n * class App extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = { count: 0 }\n *   }\n *\n *   onPress = () => {\n *     this.setState({\n *       count: this.state.count+1\n *     })\n *   }\n *\n *  render() {\n *     return (\n *       <View style={styles.container}>\n *         <TouchableHighlight\n *          style={styles.button}\n *          onPress={this.onPress}\n *         >\n *          <Text> Touch Here </Text>\n *         </TouchableHighlight>\n *         <View style={[styles.countContainer]}>\n *           <Text style={[styles.countText]}>\n *             { this.state.count !== 0 ? this.state.count: null}\n *           </Text>\n *         </View>\n *       </View>\n *     )\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'center',\n *     paddingHorizontal: 10\n *   },\n *   button: {\n *     alignItems: 'center',\n *     backgroundColor: '#DDDDDD',\n *     padding: 10\n *   },\n *   countContainer: {\n *     alignItems: 'center',\n *     padding: 10\n *   },\n *   countText: {\n *     color: '#FF00FF'\n *   }\n * })\n *\n * AppRegistry.registerComponent('App', () => App)\n * ```\n *\n */\nclass TouchableHighlight extends React.Component<Props, State> {\n  _hideTimeout: ?TimeoutID;\n  _isMounted: boolean = false;\n  _tvTouchable: ?TVTouchable;\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n    extraStyles:\n      this.props.testOnly_pressed === true ? this._createExtraStyles() : null,\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled: this.props.disabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onBlur: event => {\n        if (Platform.isTV) {\n          this._hideUnderlay();\n        }\n        if (this.props.onBlur != null) {\n          this.props.onBlur(event);\n        }\n      },\n      onFocus: event => {\n        if (Platform.isTV) {\n          this._showUnderlay();\n        }\n        if (this.props.onFocus != null) {\n          this.props.onFocus(event);\n        }\n      },\n      onLongPress: event => {\n        if (this.props.onLongPress != null) {\n          this.props.onLongPress(event);\n        }\n      },\n      onPress: event => {\n        if (this._hideTimeout != null) {\n          clearTimeout(this._hideTimeout);\n        }\n        if (!Platform.isTV) {\n          this._showUnderlay();\n          this._hideTimeout = setTimeout(() => {\n            this._hideUnderlay();\n          }, this.props.delayPressOut ?? 0);\n        }\n        if (this.props.onPress != null) {\n          this.props.onPress(event);\n        }\n      },\n      onPressIn: event => {\n        if (this._hideTimeout != null) {\n          clearTimeout(this._hideTimeout);\n          this._hideTimeout = null;\n        }\n        this._showUnderlay();\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressOut: event => {\n        if (this._hideTimeout == null) {\n          this._hideUnderlay();\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _createExtraStyles(): ExtraStyles {\n    return {\n      child: {opacity: this.props.activeOpacity ?? 0.85},\n      underlay: {\n        backgroundColor:\n          this.props.underlayColor === undefined\n            ? 'black'\n            : this.props.underlayColor,\n      },\n    };\n  }\n\n  _showUnderlay(): void {\n    if (!this._isMounted || !this._hasPressHandler()) {\n      return;\n    }\n    this.setState({extraStyles: this._createExtraStyles()});\n    if (this.props.onShowUnderlay != null) {\n      this.props.onShowUnderlay();\n    }\n  }\n\n  _hideUnderlay(): void {\n    if (this._hideTimeout != null) {\n      clearTimeout(this._hideTimeout);\n      this._hideTimeout = null;\n    }\n    if (this.props.testOnly_pressed === true) {\n      return;\n    }\n    if (this._hasPressHandler()) {\n      this.setState({extraStyles: null});\n      if (this.props.onHideUnderlay != null) {\n        this.props.onHideUnderlay();\n      }\n    }\n  }\n\n  _hasPressHandler(): boolean {\n    return (\n      this.props.onPress != null ||\n      this.props.onPressIn != null ||\n      this.props.onPressOut != null ||\n      this.props.onLongPress != null\n    );\n  }\n\n  render(): React.Node {\n    const child = React.Children.only(this.props.children);\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    return (\n      <View\n        accessible={this.props.accessible !== false}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityHint={this.props.accessibilityHint}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityState={this.props.accessibilityState}\n        accessibilityValue={this.props.accessibilityValue}\n        accessibilityActions={this.props.accessibilityActions}\n        onAccessibilityAction={this.props.onAccessibilityAction}\n        importantForAccessibility={this.props.importantForAccessibility}\n        accessibilityLiveRegion={this.props.accessibilityLiveRegion}\n        accessibilityViewIsModal={this.props.accessibilityViewIsModal}\n        accessibilityElementsHidden={this.props.accessibilityElementsHidden}\n        style={StyleSheet.compose(\n          this.props.style,\n          this.state.extraStyles?.underlay,\n        )}\n        onLayout={this.props.onLayout}\n        hitSlop={this.props.hitSlop}\n        hasTVPreferredFocus={this.props.hasTVPreferredFocus}\n        nextFocusDown={this.props.nextFocusDown}\n        nextFocusForward={this.props.nextFocusForward}\n        nextFocusLeft={this.props.nextFocusLeft}\n        nextFocusRight={this.props.nextFocusRight}\n        nextFocusUp={this.props.nextFocusUp}\n        focusable={\n          this.props.focusable !== false && this.props.onPress !== undefined\n        }\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}\n        ref={this.props.hostRef}\n        {...eventHandlersWithoutBlurAndFocus}>\n        {React.cloneElement(child, {\n          style: StyleSheet.compose(\n            child.props.style,\n            this.state.extraStyles?.child,\n          ),\n        })}\n        {__DEV__ ? (\n          <PressabilityDebugView color=\"green\" hitSlop={this.props.hitSlop} />\n        ) : null}\n      </View>\n    );\n  }\n\n  componentDidMount(): void {\n    this._isMounted = true;\n    if (Platform.isTV) {\n      this._tvTouchable = new TVTouchable(this, {\n        getDisabled: () => this.props.disabled === true,\n        onBlur: event => {\n          if (this.props.onBlur != null) {\n            this.props.onBlur(event);\n          }\n        },\n        onFocus: event => {\n          if (this.props.onFocus != null) {\n            this.props.onFocus(event);\n          }\n        },\n        onPress: event => {\n          if (this.props.onPress != null) {\n            this.props.onPress(event);\n          }\n        },\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this._isMounted = false;\n    if (this._hideTimeout != null) {\n      clearTimeout(this._hideTimeout);\n    }\n    if (Platform.isTV) {\n      if (this._tvTouchable != null) {\n        this._tvTouchable.destroy();\n      }\n    }\n    this.state.pressability.reset();\n  }\n}\n\nmodule.exports = (React.forwardRef((props, hostRef) => (\n  <TouchableHighlight {...props} hostRef={hostRef} />\n)): React.ComponentType<$ReadOnly<$Diff<Props, {|hostRef: mixed|}>>>);\n"]},"metadata":{},"sourceType":"module"}